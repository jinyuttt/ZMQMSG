/**    
 * 文件名：ObjectReq.java    
 *    
 * 版本信息：    
 * 日期：2018年7月22日    
 * Copyright 足下 Corporation 2018     
 * 版权所有    
 *    
 */
package cd.jason.Srv;

import cd.jason.msg.MQClient;
import cd.jason.msg.ObjectSerialize;
import cd.jason.msgmq.NetProtocol;

/**    
 *     
 * 项目名称：msgmq    
 * 类名称：ObjectReq    
 * 类描述：    
 * 创建人：jinyu    
 * 创建时间：2018年7月22日 下午7:24:31    
 * 修改人：jinyu    
 * 修改时间：2018年7月22日 下午7:24:31    
 * 修改备注：    
 * @version     
 *     
 */
public class ObjectReq {
	public String srvIP="*";
	public int port=0;
	public NetProtocol netProtocol;
	public int bufSize=128;
	public int MsgHWM=1000;
	MQClient socket=null;
	public String ObjProtocol="Byte";
	private ObjectSerialize<T> msgSerialize=null;
	   
		/**
		 * 
		 * @Title: setAddress   
		 * @Description: 构造地址        
		 * void      
		 * @throws
		 */
		public void setAddress()
		{
			socket.bufSize=this.bufSize;
			socket.MsgHWM=this.MsgHWM;
			socket.netProtocol=this.netProtocol;
			socket.port=this.port;
			socket.srvIP=this.srvIP;
		}
		private <T> byte[] serialize(T obj)
		{
			if(ObjProtocol.equals("Byte"))
			{
			return msgSerialize.serialize(obj);
			}
			else if(ObjProtocol.equals("JSON"))
			{
				return msgSerialize.serializeJson(obj).getBytes();
			}
			return null;
			
		}
		private <V> V deserialize(byte[] data,Class<V> clazz)
		{
			ObjectSerialize<V> msgDeserialize=new ObjectSerialize<V>();
			if(ObjProtocol.equals("Byte"))
			{
			    return msgDeserialize.deserialize(data, clazz);
			}
			else if(ObjProtocol.equals("JSON"))
			{
				String json=String.valueOf(data);
				return msgDeserialize.deserializeJSON(json, clazz);
			}
			return null;
		}
		
		/**
		 * 连接服务端
		 * @Title: sendMsg   
		 * @Description: 发送对象 
		 * @param obj
		 * @param clazz 返回的类型
		 * @return      
		 * V      
		 * @throws
		 */
	public <V>  V  sendMsg(T obj,Class<V> clazz)
	{
		byte[]r=socket.sendMsg(this.serialize(obj));
		V v=this.deserialize(r, clazz);
		return v;
	}




	/**
	 * 关闭
	 * @Title: close   
	 * @Description:  关闭通信      
	 * void      
	 * @throws
	 */
	public void close()
	{
	   socket.close();
	}
}
